
nice:     file format elf32-i386


Disassembly of section .init:

08048308 <_init>:
 8048308:	53                   	push   ebx
 8048309:	83 ec 08             	sub    esp,0x8
 804830c:	e8 df 00 00 00       	call   80483f0 <__x86.get_pc_thunk.bx>
 8048311:	81 c3 ef 1c 00 00    	add    ebx,0x1cef
 8048317:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
 804831d:	85 c0                	test   eax,eax
 804831f:	74 05                	je     8048326 <_init+0x1e>
 8048321:	e8 6a 00 00 00       	call   8048390 <ptrace@plt+0x10>
 8048326:	83 c4 08             	add    esp,0x8
 8048329:	5b                   	pop    ebx
 804832a:	c3                   	ret    

Disassembly of section .plt:

08048330 <read@plt-0x10>:
 8048330:	ff 35 04 a0 04 08    	push   DWORD PTR ds:0x804a004
 8048336:	ff 25 08 a0 04 08    	jmp    DWORD PTR ds:0x804a008
 804833c:	00 00                	add    BYTE PTR [eax],al
	...

08048340 <read@plt>:
 8048340:	ff 25 0c a0 04 08    	jmp    DWORD PTR ds:0x804a00c
 8048346:	68 00 00 00 00       	push   0x0
 804834b:	e9 e0 ff ff ff       	jmp    8048330 <_init+0x28>

08048350 <puts@plt>:
 8048350:	ff 25 10 a0 04 08    	jmp    DWORD PTR ds:0x804a010
 8048356:	68 08 00 00 00       	push   0x8
 804835b:	e9 d0 ff ff ff       	jmp    8048330 <_init+0x28>

08048360 <exit@plt>:
 8048360:	ff 25 14 a0 04 08    	jmp    DWORD PTR ds:0x804a014
 8048366:	68 10 00 00 00       	push   0x10
 804836b:	e9 c0 ff ff ff       	jmp    8048330 <_init+0x28>

08048370 <__libc_start_main@plt>:
 8048370:	ff 25 18 a0 04 08    	jmp    DWORD PTR ds:0x804a018
 8048376:	68 18 00 00 00       	push   0x18
 804837b:	e9 b0 ff ff ff       	jmp    8048330 <_init+0x28>

08048380 <ptrace@plt>:
 8048380:	ff 25 1c a0 04 08    	jmp    DWORD PTR ds:0x804a01c
 8048386:	68 20 00 00 00       	push   0x20
 804838b:	e9 a0 ff ff ff       	jmp    8048330 <_init+0x28>

Disassembly of section .plt.got:

08048390 <.plt.got>:
 8048390:	ff 25 fc 9f 04 08    	jmp    DWORD PTR ds:0x8049ffc
 8048396:	66 90                	xchg   ax,ax

Disassembly of section .text:

080483a0 <_start>:
 80483a0:	31 ed                	xor    ebp,ebp
 80483a2:	5e                   	pop    esi
 80483a3:	89 e1                	mov    ecx,esp
 80483a5:	83 e4 f0             	and    esp,0xfffffff0
 80483a8:	50                   	push   eax
 80483a9:	54                   	push   esp
 80483aa:	52                   	push   edx
 80483ab:	e8 23 00 00 00       	call   80483d3 <_start+0x33>
 80483b0:	81 c3 50 1c 00 00    	add    ebx,0x1c50
 80483b6:	8d 83 10 e8 ff ff    	lea    eax,[ebx-0x17f0]
 80483bc:	50                   	push   eax
 80483bd:	8d 83 b0 e7 ff ff    	lea    eax,[ebx-0x1850]
 80483c3:	50                   	push   eax
 80483c4:	51                   	push   ecx
 80483c5:	56                   	push   esi
 80483c6:	c7 c0 d7 86 04 08    	mov    eax,0x80486d7
 80483cc:	50                   	push   eax
 80483cd:	e8 9e ff ff ff       	call   8048370 <__libc_start_main@plt>
 80483d2:	f4                   	hlt    
 80483d3:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 80483d6:	c3                   	ret    
 80483d7:	66 90                	xchg   ax,ax
 80483d9:	66 90                	xchg   ax,ax
 80483db:	66 90                	xchg   ax,ax
 80483dd:	66 90                	xchg   ax,ax
 80483df:	90                   	nop

080483e0 <_dl_relocate_static_pie>:
 80483e0:	f3 c3                	repz ret 
 80483e2:	66 90                	xchg   ax,ax
 80483e4:	66 90                	xchg   ax,ax
 80483e6:	66 90                	xchg   ax,ax
 80483e8:	66 90                	xchg   ax,ax
 80483ea:	66 90                	xchg   ax,ax
 80483ec:	66 90                	xchg   ax,ax
 80483ee:	66 90                	xchg   ax,ax

080483f0 <__x86.get_pc_thunk.bx>:
 80483f0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 80483f3:	c3                   	ret    
 80483f4:	66 90                	xchg   ax,ax
 80483f6:	66 90                	xchg   ax,ax
 80483f8:	66 90                	xchg   ax,ax
 80483fa:	66 90                	xchg   ax,ax
 80483fc:	66 90                	xchg   ax,ax
 80483fe:	66 90                	xchg   ax,ax
 8048400:	b8 6c a0 04 08       	mov    eax,0x804a06c
 8048405:	3d 6c a0 04 08       	cmp    eax,0x804a06c
 804840a:	74 24                	je     8048430 <__x86.get_pc_thunk.bx+0x40>
 804840c:	b8 00 00 00 00       	mov    eax,0x0
 8048411:	85 c0                	test   eax,eax
 8048413:	74 1b                	je     8048430 <__x86.get_pc_thunk.bx+0x40>
 8048415:	55                   	push   ebp
 8048416:	89 e5                	mov    ebp,esp
 8048418:	83 ec 14             	sub    esp,0x14
 804841b:	68 6c a0 04 08       	push   0x804a06c
 8048420:	ff d0                	call   eax
 8048422:	83 c4 10             	add    esp,0x10
 8048425:	c9                   	leave  
 8048426:	c3                   	ret    
 8048427:	89 f6                	mov    esi,esi
 8048429:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
 8048430:	f3 c3                	repz ret 
 8048432:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
 8048439:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
 8048440:	b8 6c a0 04 08       	mov    eax,0x804a06c
 8048445:	2d 6c a0 04 08       	sub    eax,0x804a06c
 804844a:	c1 f8 02             	sar    eax,0x2
 804844d:	89 c2                	mov    edx,eax
 804844f:	c1 ea 1f             	shr    edx,0x1f
 8048452:	01 d0                	add    eax,edx
 8048454:	d1 f8                	sar    eax,1
 8048456:	74 20                	je     8048478 <__x86.get_pc_thunk.bx+0x88>
 8048458:	ba 00 00 00 00       	mov    edx,0x0
 804845d:	85 d2                	test   edx,edx
 804845f:	74 17                	je     8048478 <__x86.get_pc_thunk.bx+0x88>
 8048461:	55                   	push   ebp
 8048462:	89 e5                	mov    ebp,esp
 8048464:	83 ec 10             	sub    esp,0x10
 8048467:	50                   	push   eax
 8048468:	68 6c a0 04 08       	push   0x804a06c
 804846d:	ff d2                	call   edx
 804846f:	83 c4 10             	add    esp,0x10
 8048472:	c9                   	leave  
 8048473:	c3                   	ret    
 8048474:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
 8048478:	f3 c3                	repz ret 
 804847a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 8048480:	80 3d 6b a0 04 08 00 	cmp    BYTE PTR ds:0x804a06b,0x0
 8048487:	75 17                	jne    80484a0 <__x86.get_pc_thunk.bx+0xb0>
 8048489:	55                   	push   ebp
 804848a:	89 e5                	mov    ebp,esp
 804848c:	83 ec 08             	sub    esp,0x8
 804848f:	e8 6c ff ff ff       	call   8048400 <__x86.get_pc_thunk.bx+0x10>
 8048494:	c6 05 6b a0 04 08 01 	mov    BYTE PTR ds:0x804a06b,0x1
 804849b:	c9                   	leave  
 804849c:	c3                   	ret    
 804849d:	8d 76 00             	lea    esi,[esi+0x0]
 80484a0:	f3 c3                	repz ret 
 80484a2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
 80484a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
 80484b0:	55                   	push   ebp
 80484b1:	89 e5                	mov    ebp,esp
 80484b3:	5d                   	pop    ebp
 80484b4:	eb 8a                	jmp    8048440 <__x86.get_pc_thunk.bx+0x50>
 80484b6:	66 90                	xchg   ax,ax
 80484b8:	66 90                	xchg   ax,ax
 80484ba:	66 90                	xchg   ax,ax
 80484bc:	66 90                	xchg   ax,ax
 80484be:	66 90                	xchg   ax,ax
 80484c0:	53                   	push   ebx
 80484c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
 80484c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
 80484c9:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
 80484cc:	0f b6 18             	movzx  ebx,BYTE PTR [eax]
 80484cf:	88 1a                	mov    BYTE PTR [edx],bl
 80484d1:	88 08                	mov    BYTE PTR [eax],cl
 80484d3:	5b                   	pop    ebx
 80484d4:	c3                   	ret    
 80484d5:	55                   	push   ebp
 80484d6:	31 c0                	xor    eax,eax
 80484d8:	57                   	push   edi
 80484d9:	56                   	push   esi
 80484da:	53                   	push   ebx
 80484db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
 80484df:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
 80484e3:	66 90                	xchg   ax,ax
 80484e5:	88 04 06             	mov    BYTE PTR [esi+eax*1],al
 80484e8:	83 c0 01             	add    eax,0x1
 80484eb:	3d 00 01 00 00       	cmp    eax,0x100
 80484f0:	75 f3                	jne    80484e5 <__x86.get_pc_thunk.bx+0xf5>
 80484f2:	31 c9                	xor    ecx,ecx
 80484f4:	31 db                	xor    ebx,ebx
 80484f6:	89 d8                	mov    eax,ebx
 80484f8:	0f b6 3c 1e          	movzx  edi,BYTE PTR [esi+ebx*1]
 80484fc:	99                   	cdq    
 80484fd:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
 8048501:	89 f8                	mov    eax,edi
 8048503:	02 44 15 00          	add    al,BYTE PTR [ebp+edx*1+0x0]
 8048507:	01 c1                	add    ecx,eax
 8048509:	0f b6 c9             	movzx  ecx,cl
 804850c:	0f b6 04 0e          	movzx  eax,BYTE PTR [esi+ecx*1]
 8048510:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
 8048513:	89 f8                	mov    eax,edi
 8048515:	83 c3 01             	add    ebx,0x1
 8048518:	88 04 0e             	mov    BYTE PTR [esi+ecx*1],al
 804851b:	81 fb 00 01 00 00    	cmp    ebx,0x100
 8048521:	75 d3                	jne    80484f6 <__x86.get_pc_thunk.bx+0x106>
 8048523:	5b                   	pop    ebx
 8048524:	5e                   	pop    esi
 8048525:	5f                   	pop    edi
 8048526:	5d                   	pop    ebp
 8048527:	c3                   	ret    
 8048528:	55                   	push   ebp
 8048529:	57                   	push   edi
 804852a:	56                   	push   esi
 804852b:	53                   	push   ebx
 804852c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
 8048530:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
 8048534:	85 ff                	test   edi,edi
 8048536:	7e 38                	jle    8048570 <__x86.get_pc_thunk.bx+0x180>
 8048538:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
 804853c:	31 db                	xor    ebx,ebx
 804853e:	31 d2                	xor    edx,edx
 8048540:	01 f7                	add    edi,esi
 8048542:	83 c2 01             	add    edx,0x1
 8048545:	0f b6 d2             	movzx  edx,dl
 8048548:	0f b6 2c 11          	movzx  ebp,BYTE PTR [ecx+edx*1]
 804854c:	01 eb                	add    ebx,ebp
 804854e:	0f b6 db             	movzx  ebx,bl
 8048551:	0f b6 04 19          	movzx  eax,BYTE PTR [ecx+ebx*1]
 8048555:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
 8048558:	89 e8                	mov    eax,ebp
 804855a:	88 04 19             	mov    BYTE PTR [ecx+ebx*1],al
 804855d:	02 04 11             	add    al,BYTE PTR [ecx+edx*1]
 8048560:	0f b6 c0             	movzx  eax,al
 8048563:	0f b6 04 01          	movzx  eax,BYTE PTR [ecx+eax*1]
 8048567:	30 06                	xor    BYTE PTR [esi],al
 8048569:	83 c6 01             	add    esi,0x1
 804856c:	39 f7                	cmp    edi,esi
 804856e:	75 d2                	jne    8048542 <__x86.get_pc_thunk.bx+0x152>
 8048570:	5b                   	pop    ebx
 8048571:	5e                   	pop    esi
 8048572:	5f                   	pop    edi
 8048573:	5d                   	pop    ebp
 8048574:	c3                   	ret    
 8048575:	55                   	push   ebp
 8048576:	89 e5                	mov    ebp,esp
 8048578:	81 ec 08 01 00 00    	sub    esp,0x108
 804857e:	83 ec 04             	sub    esp,0x4
 8048581:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
 8048584:	ff 75 08             	push   DWORD PTR [ebp+0x8]
 8048587:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
 804858d:	50                   	push   eax
 804858e:	e8 42 ff ff ff       	call   80484d5 <__x86.get_pc_thunk.bx+0xe5>
 8048593:	83 c4 10             	add    esp,0x10
 8048596:	83 ec 04             	sub    esp,0x4
 8048599:	6a 2b                	push   0x2b
 804859b:	68 28 a0 04 08       	push   0x804a028
 80485a0:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
 80485a6:	50                   	push   eax
 80485a7:	e8 7c ff ff ff       	call   8048528 <__x86.get_pc_thunk.bx+0x138>
 80485ac:	83 c4 10             	add    esp,0x10
 80485af:	c9                   	leave  
 80485b0:	c3                   	ret    

080485b1 <print_flag>:
 80485b1:	55                   	push   ebp
 80485b2:	89 e5                	mov    ebp,esp
 80485b4:	6a 04                	push   0x4
 80485b6:	68 66 a0 04 08       	push   0x804a066
 80485bb:	6a 00                	push   0x0
 80485bd:	6a 00                	push   0x0
 80485bf:	6a 00                	push   0x0
 80485c1:	6a 00                	push   0x0
 80485c3:	e8 b8 fd ff ff       	call   8048380 <ptrace@plt>
 80485c8:	83 c4 10             	add    esp,0x10
 80485cb:	83 f8 ff             	cmp    eax,0xffffffff
 80485ce:	75 07                	jne    80485d7 <print_flag+0x26>
 80485d0:	6a 01                	push   0x1
 80485d2:	e8 89 fd ff ff       	call   8048360 <exit@plt>
 80485d7:	e8 99 ff ff ff       	call   8048575 <__x86.get_pc_thunk.bx+0x185>
 80485dc:	68 28 a0 04 08       	push   0x804a028
 80485e1:	e8 6a fd ff ff       	call   8048350 <puts@plt>
 80485e6:	c9                   	leave  
 80485e7:	c3                   	ret    


 80485e8:	55                   	push   ebp
 80485e9:	89 e5                	mov    ebp,esp
 80485eb:	68 54 a0 04 08       	push   0x804a054
 80485f0:	e8 5b fd ff ff       	call   8048350 <puts@plt>
 80485f5:	6a 00                	push   0x0
 80485f7:	e8 64 fd ff ff       	call   8048360 <exit@plt>
 80485fc:	c9                   	leave  
 80485fd:	c3                   	ret    


 80485fe:	55                   	push   ebp
 80485ff:	89 e5                	mov    ebp,esp
 8048601:	81 ec b3 01 00 00    	sub    esp,0x1b3  	; BUFFER 0x1b3 = 435 bytes
 8048607:	89 e2                	mov    edx,esp
 8048609:	68 c6 00 00 00       	push   0xc6 		; Citeste pana la 0xc6 = 198
 804860e:	52                   	push   edx 			; Adresa la care citeste
 804860f:	6a 00                	push   0x0 			; 0 = STDIN
 8048611:	e8 2a fd ff ff       	call   8048340 <read@plt>
 8048616:	c9                   	leave  
 8048617:	c3                   	ret    


 8048618:	55                   	push   ebp
 8048619:	89 e5                	mov    ebp,esp
 804861b:	81 ec af 01 00 00    	sub    esp,0x1af	; BUFFER 0x1af = 431 bytes
 8048621:	89 e2                	mov    edx,esp
 8048623:	68 1d 01 00 00       	push   0x11d		; Citeste pana la 0x11d = 285
 8048628:	52                   	push   edx			; adresa la care citeste
 8048629:	6a 00                	push   0x0			; 0 = STDIN
 804862b:	e8 10 fd ff ff       	call   8048340 <read@plt>
 8048630:	c9                   	leave  
 8048631:	c3                   	ret    


 8048632:	55                   	push   ebp
 8048633:	89 e5                	mov    ebp,esp
 8048635:	81 ec d6 00 00 00    	sub    esp,0xd6		; BUFFER 0xD6 = 214
 804863b:	89 e2                	mov    edx,esp
 804863d:	68 87 00 00 00       	push   0x87			; Citeste pana la 0x87 = 135
 8048642:	52                   	push   edx			; adresa la care se citeste
 8048643:	6a 00                	push   0x0			; 0 = STDIN
 8048645:	e8 f6 fc ff ff       	call   8048340 <read@plt>
 804864a:	c9                   	leave  
 804864b:	c3                   	ret    

					; AICI E VULNERABILITATEA <print_flag+0x9b>
 804864c:	55                   	push   ebp
 804864d:	89 e5                	mov    ebp,esp
 804864f:	81 ec b8 01 00 00    	sub    esp,0x1b8	; BUFFER 0x1B8 = 440
 8048655:	89 e2                	mov    edx,esp
 8048657:	68 8d 03 00 00       	push   0x38d		; Citeste pana la 0x38d = 909
 804865c:	52                   	push   edx			; adresa la care citeste
 804865d:	6a 00                	push   0x0			; 0 = STDIN
 804865f:	e8 dc fc ff ff       	call   8048340 <read@plt>
 8048664:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
 8048667:	ff d0                	call   eax
 8048669:	6a 00                	push   0x0
 804866b:	e8 f0 fc ff ff       	call   8048360 <exit@plt>
 8048670:	c9                   	leave  
 8048671:	c3                   	ret    


 8048672:	55                   	push   ebp
 8048673:	89 e5                	mov    ebp,esp
 8048675:	81 ec d9 01 00 00    	sub    esp,0x1d9	; BUFFER 0x1d9 = 473
 804867b:	89 e2                	mov    edx,esp
 804867d:	68 0e 01 00 00       	push   0x10e		; Citeste pana la 0x10E = 270
 8048682:	52                   	push   edx			; adresa la care citeste
 8048683:	6a 00                	push   0x0			; 0 = STDIN
 8048685:	e8 b6 fc ff ff       	call   8048340 <read@plt>
 804868a:	c9                   	leave  
 804868b:	c3                   	ret    


 804868c:	55                   	push   ebp
 804868d:	89 e5                	mov    ebp,esp
 804868f:	81 ec e9 01 00 00    	sub    esp,0x1e9 	; BUFFER 0x1e9 = 489
 8048695:	89 e2                	mov    edx,esp
 8048697:	68 33 01 00 00       	push   0x133		; Citeste pana la 0x10E = 307
 804869c:	52                   	push   edx			; adresa la care citeste
 804869d:	6a 00                	push   0x0			; 0 = STDIN
 804869f:	e8 9c fc ff ff       	call   8048340 <read@plt>
 80486a4:	c9                   	leave  
 80486a5:	c3                   	ret    


 80486a6:	55                   	push   ebp
 80486a7:	89 e5                	mov    ebp,esp
 80486a9:	81 ec d6 01 00 00    	sub    esp,0x1d6	; BUFFER 0x1d6 = 470
 80486af:	89 e2                	mov    edx,esp
 80486b1:	6a 7e                	push   0x7e			; Citeste pana la 0x7E = 126
 80486b3:	52                   	push   edx			; adresa la care citeste
 80486b4:	6a 00                	push   0x0			; 0 = STDIN
 80486b6:	e8 85 fc ff ff       	call   8048340 <read@plt>
 80486bb:	c9                   	leave  
 80486bc:	c3                   	ret    


 80486bd:	55                   	push   ebp
 80486be:	89 e5                	mov    ebp,esp
 80486c0:	81 ec 2b 01 00 00    	sub    esp,0x12b	; BUFFER 0x12B = 299
 80486c6:	89 e2                	mov    edx,esp
 80486c8:	68 0e 01 00 00       	push   0x10e		; Citeste pana la 0x10E = 270
 80486cd:	52                   	push   edx			; adresa la care citeste
 80486ce:	6a 00                	push   0x0			; 0 = STDIN
 80486d0:	e8 6b fc ff ff       	call   8048340 <read@plt>
 80486d5:	c9                   	leave  
 80486d6:	c3                   	ret    

080486d7 <main>:
 80486d7:	55                   	push   ebp
 80486d8:	89 e5                	mov    ebp,esp
 80486da:	68 7f 02 04 08       	push   0x804027f
 80486df:	68 e7 4f 04 08       	push   0x8044fe7
 80486e4:	68 b9 b7 04 08       	push   0x804b7b9
 80486e9:	68 85 08 04 08       	push   0x8040885
 80486ee:	e8 0b ff ff ff       	call   80485fe <print_flag+0x4d>
 80486f3:	68 8d 04 04 08       	push   0x804048d
 80486f8:	68 15 5a 04 08       	push   0x8045a15
 80486fd:	68 24 c2 04 08       	push   0x804c224
 8048702:	e8 11 ff ff ff       	call   8048618 <print_flag+0x67>
 8048707:	68 e4 64 04 08       	push   0x80464e4
 804870c:	68 71 c6 04 08       	push   0x804c671
 8048711:	e8 1c ff ff ff       	call   8048632 <print_flag+0x81>
 8048716:	68 10 be 04 08       	push   0x804be10
 804871b:	68 e8 85 04 08       	push   0x80485e8
 8048720:	68 f3 29 04 08       	push   0x80429f3
 8048725:	68 7e 27 04 08       	push   0x804277e
 804872a:	68 78 f8 04 08       	push   0x804f878
 804872f:	68 13 11 04 08       	push   0x8041113
 8048734:	e8 13 ff ff ff       	call   804864c <print_flag+0x9b>
 8048739:	68 0a 1e 04 08       	push   0x8041e0a
 804873e:	68 0f 0a 04 08       	push   0x8040a0f
 8048743:	68 54 27 04 08       	push   0x8042754
 8048748:	68 b4 d4 04 08       	push   0x804d4b4
 804874d:	68 b7 fa 04 08       	push   0x804fab7
 8048752:	e8 1b ff ff ff       	call   8048672 <print_flag+0xc1>
 8048757:	68 af ef 04 08       	push   0x804efaf
 804875c:	68 f0 9b 04 08       	push   0x8049bf0
 8048761:	68 f5 4e 04 08       	push   0x8044ef5
 8048766:	e8 21 ff ff ff       	call   804868c <print_flag+0xdb>
 804876b:	68 02 cb 04 08       	push   0x804cb02
 8048770:	68 84 21 04 08       	push   0x8042184
 8048775:	68 85 e3 04 08       	push   0x804e385
 804877a:	68 de 63 04 08       	push   0x80463de
 804877f:	68 95 dc 04 08       	push   0x804dc95
 8048784:	e8 1d ff ff ff       	call   80486a6 <print_flag+0xf5>
 8048789:	68 9f cb 04 08       	push   0x804cb9f
 804878e:	68 62 c6 04 08       	push   0x804c662
 8048793:	68 80 bf 04 08       	push   0x804bf80
 8048798:	68 11 4f 04 08       	push   0x8044f11
 804879d:	68 e5 42 04 08       	push   0x80442e5
 80487a2:	e8 16 ff ff ff       	call   80486bd <print_flag+0x10c>
 80487a7:	c9                   	leave  
 80487a8:	c3                   	ret    
 80487a9:	66 90                	xchg   ax,ax
 80487ab:	66 90                	xchg   ax,ax
 80487ad:	66 90                	xchg   ax,ax
 80487af:	90                   	nop

080487b0 <__libc_csu_init>:
 80487b0:	55                   	push   ebp
 80487b1:	57                   	push   edi
 80487b2:	56                   	push   esi
 80487b3:	53                   	push   ebx
 80487b4:	e8 37 fc ff ff       	call   80483f0 <__x86.get_pc_thunk.bx>
 80487b9:	81 c3 47 18 00 00    	add    ebx,0x1847
 80487bf:	83 ec 0c             	sub    esp,0xc
 80487c2:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
 80487c6:	8d b3 10 ff ff ff    	lea    esi,[ebx-0xf0]
 80487cc:	e8 37 fb ff ff       	call   8048308 <_init>
 80487d1:	8d 83 0c ff ff ff    	lea    eax,[ebx-0xf4]
 80487d7:	29 c6                	sub    esi,eax
 80487d9:	c1 fe 02             	sar    esi,0x2
 80487dc:	85 f6                	test   esi,esi
 80487de:	74 25                	je     8048805 <__libc_csu_init+0x55>
 80487e0:	31 ff                	xor    edi,edi
 80487e2:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 80487e8:	83 ec 04             	sub    esp,0x4
 80487eb:	55                   	push   ebp
 80487ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 80487f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 80487f4:	ff 94 bb 0c ff ff ff 	call   DWORD PTR [ebx+edi*4-0xf4]
 80487fb:	83 c7 01             	add    edi,0x1
 80487fe:	83 c4 10             	add    esp,0x10
 8048801:	39 fe                	cmp    esi,edi
 8048803:	75 e3                	jne    80487e8 <__libc_csu_init+0x38>
 8048805:	83 c4 0c             	add    esp,0xc
 8048808:	5b                   	pop    ebx
 8048809:	5e                   	pop    esi
 804880a:	5f                   	pop    edi
 804880b:	5d                   	pop    ebp
 804880c:	c3                   	ret    
 804880d:	8d 76 00             	lea    esi,[esi+0x0]

08048810 <__libc_csu_fini>:
 8048810:	f3 c3                	repz ret 

Disassembly of section .fini:

08048814 <_fini>:
 8048814:	53                   	push   ebx
 8048815:	83 ec 08             	sub    esp,0x8
 8048818:	e8 d3 fb ff ff       	call   80483f0 <__x86.get_pc_thunk.bx>
 804881d:	81 c3 e3 17 00 00    	add    ebx,0x17e3
 8048823:	83 c4 08             	add    esp,0x8
 8048826:	5b                   	pop    ebx
 8048827:	c3                   	ret    
